<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vege購物車</title>
    <link rel="icon" href="/img/fruitbox_s.png">

    <!-- vg style -->
    <%- include('share/head_link.ejs') %>
        <link rel="stylesheet" href="css/cart.css">


</head>

<body>
    <!-- 頁首 -->
    <%- include('share/header.ejs') %>
        <!-- 主要區塊 -->
        <main style="margin-top: 130px; margin-bottom: 50px;">
            <!-- progress bar -->
            <div>
                <ul id="progressbar">
                    <li class="active">購物車</li>
                    <li>結帳</li>
                    <li>送出訂單</li>
                    <li>訂購完成</li>
                </ul>
            </div>
            <div class="row mx-auto container">
                <section class="lside col col-md-7">
                    <!-- order items -->
                    <div id="orderitems">
                        <h3 class="vg-h3 text-center my-3">購物清單</h3>
                        <div>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>品項</th>
                                        <th>規格</th>
                                        <th class="vg-href" onclick="cnotemodal()">備註<i
                                                class="mx-1 fa-solid fa-circle-info"></i>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody id="cartitems">
                                    <!-- cart items here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!--  wish list -->
                    <div id="wishlist" class="mt-2">
                        <h5 class="vg-h5 mt-0">願望<br />清單</h5>
                        <div class="d-flex" id="wishlistitems">
                            <!-- wishlist items here -->
                        </div>
                    </div>
                    <!-- coupon -->
                    <div id="coupon" class="mt-2 mb-4">
                        <nav>
                            <div class="nav nav-tabs w-100" id="" role="tablist">
                                <button class="nav-link" id="nav-coupun-tab" data-bs-toggle="tab"
                                    data-bs-target="#nav-coupun" type="button" role="tab" aria-controls="nav-coupun"
                                    aria-selected="true">折扣碼</button>
                                <button class="nav-link active" id="nav-vgmoney-tab" data-bs-toggle="tab"
                                    data-bs-target="#nav-vgmoney" type="button" role="tab" aria-controls="nav-vgmoney"
                                    aria-selected="false">購物金</button>
                            </div>
                        </nav>
                        <div class="tab-content" id="">
                            <div class="tab-pane fade" id="nav-coupun" role="tabpanel" aria-labelledby="nav-coupun-tab"
                                tabindex="0">
                                <input type="text" class="form-control w-25 m-auto d-inline my-3" name="" id="couponid"
                                    placeholder="請輸入折扣碼" oninput="couponval(this)">
                                <button class="btn btn-vg-xs my-2" value="" onclick="useCoupon()">送出</button>
                                <!-- <p class="vg-ps text-warning mt-1">折扣碼錯誤</p> -->
                            </div>
                            <div class="tab-pane fade show active" id="nav-vgmoney" role="tabpanel"
                                aria-labelledby="nav-vgmoney-tab" tabindex="0">
                                <input type="text" class="form-control w-25 m-auto d-inline" name="" id="myuseBonus"
                                    placeholder="請輸入欲折抵的購物金" oninput="bonusval(this)">
                                <button class="btn btn-vg-xs" value="" onclick="useBonus()">送出</button>
                                <p class="vg-ps mt-1">您擁有的購物金:
                                    <span class="text-primary" id="userBonus"></span>&nbsp;&nbsp;&nbsp;
                                    <!-- <input type="radio" name="" id="useall"> <label for="useall">全部使用</label> -->
                                </p>
                            </div>
                        </div>

                    </div>
                </section>
                <section class="rside col col-md-4">
                    <!-- summary -->
                    <div id="summery">
                        <h3 class="vg-h3 text-center my-3">金額試算</h3>
                        <table id="" class="table">
                            <thead>
                                <tr>
                                    <th>品項</th>
                                    <th>數量</th>
                                    <th>金額</th>
                                </tr>
                            </thead>
                            <tbody id="summary_items">
                                <!-- order items here -->
                            </tbody>
                        </table>
                        <table id="summary_coupon" class="table w-50">
                            <tr>
                                <td class="vg-p vg-href" id="shippingfee" title="1~2人160元，3~4人290元"
                                    onclick="shippingfeeinfo()">運費<i class="mx-1 fa-solid fa-circle-info"></i>
                                    <div class="modal fade" id="shippingfeeinfo" data-bs-backdrop="static"
                                        data-bs-keyboard="false" tabindex="-1" aria-labelledby="shippingfeeLabel"
                                        aria-hidden="true">
                                        <div class="modal-dialog modal-dialog-scrollable">
                                            <div class="modal-content">
                                                <div class="modal-header pt-4">
                                                    <h3 class="vg-h3 align-self-center">
                                                        運費
                                                    </h3>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                        aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <div>
                                                        <p>各品項運費獨立計算</p>
                                                        <p>1~2人160元</p>
                                                        <p>3~4人290元</p>
                                                    </div>
                                                </div>
                                                <div class="modal-footer d-flex justify-content-center">
                                                    <button type="button" class="btn btn-vg-reg"
                                                        data-bs-dismiss="modal">關閉</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <!-- <td>320</td> -->
                            </tr>
                            <tr>
                                <td class="vg-p">折扣碼<span class="vg-ps" id="usecouponid"></span></td>
                                <td id="coupondiscount">0</td>
                            </tr>
                            <tr>
                                <td class="vg-p">購物金</td>
                                <td id="bonusdiscount">0</td>
                            </tr>
                        </table>
                        <!-- <hr> -->
                        <div class="d-flex justify-content-around">
                            <div class="vg-h4">總金額</div>
                            <div class="vg-h3" id="total">0</div>
                        </div>
                    </div>
                    <!-- order -->
                    <div id="placeorder" class="text-center mt-5">
                        <a class="btn btn-vg-lg mt-2 mb-3 p-3" onclick="placeOrder()">結帳去</a><br />
                        <a href="/product" class="vg-href" onclick="backtoProduct()">繼續購物</a>
                    </div>
                </section>
            </div>
        </main>
        <!-- 頁尾 -->
        <%- include('share/footer.ejs') %>

            <!-- vg JS -->
            <%- include('share/vg-main.ejs') %>
                <script src="js/cart.js"></script>
                <script>

                    var userData = localStorage.getItem('token');
                    var userToken = userData ? JSON.parse(userData) : false;
                    var uid = userToken.id;
                    // var userData = localStorage.getItem('token');
                    // // console.log(userData)
                    // if (userData !== null) {
                    //     var userToken = userData ? JSON.parse(userData) : false;
                    //     // 設定目前使用者id
                    //     var uid = userToken.id;
                    // } else {
                    //     Swal.fire({
                    //         title: '請先登入會員',
                    //         icon: 'warning',
                    //         showConfirmButton: false,
                    //         timer: 1500
                    //     }).then(
                    //         setTimeout(() => {
                    //             document.location.href = "/login/userlogin"
                    //         }, 2000)
                    //     )
                    // }

                    // 讀取購物車物件
                    $.get(`/cart/item/${uid}`, function (e) {
                        // 購物車item一覽
                        // console.log(e)
                        if (typeof (e) == 'string') {
                            items = JSON.parse(e);
                        } else {
                            items = e;
                        }

                        $("#cartitems").empty();
                        $.each(items, function (index, item) {
                            // 修正內容備註
                            item.c_option ? item.c_option = item.c_option.split(',').slice(1,) : item.c_option = '';
                            // console.log( item.c_option )
                            item.pname.includes("自選") ? item.pinfo = '' : item.pinfo = item.pinfo;

                            // 修正自選箱價格
                            var optionPrice = 0;
                            var fetchPromises = [];
                            if (item.pname.includes('自選')) {
                                item.c_option.map((product) => {
                                    var fetchPromise = fetch('/getitemprice', {
                                        method: 'POST',
                                        headers: {
                                            "Content-Type": "application/json ; charset=UTF-8"
                                        },
                                        body: JSON.stringify({
                                            product: product
                                        })
                                    }).then((res) => {
                                        return res.json();
                                    }).then((e) => {
                                        // if (e && e[0] && e[0].price) {
                                        //     optionPrice = optionPrice + parseInt(e[0].price);
                                        // }
                                        if (e && e[0] && e[0].category == '蔬菜') {
                                            optionPrice = optionPrice + 100;
                                        } else if (e && e[0] && e[0].category == '水果') {
                                            optionPrice = optionPrice + 50;
                                        }
                                        item.price = optionPrice; // 設定到內層，非外層(?)
                                        localStorage.setItem('optionPrice', optionPrice);
                                    })
                                    fetchPromises.push(fetchPromise);
                                })
                                Promise.all(fetchPromises).then(() => {
                                    // After all fetch operations are done, update item.price and set localStorage
                                    item.price = optionPrice;
                                    localStorage.setItem('optionPrice', optionPrice);
                                    // console.log(item.price)
                                });
                            }

                            if (item.size == 's' && item.freq == 'once') {
                                var trHtml = `
                            <tr class="aa${item.pid}">
                                <td class="aa${item.pid}">${item.pname}</span></td>
                                <td class="text-start">
                                    <div>
                                        <label for="quantity">份量
                                            <select name="size" id="quantity" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="s" selected>1-2</option>
                                                <option value="l">3-4</option>
                                            </select>
                                        </label>
                                        <label for="delivery">配送
                                            <select name="freq" id="delivery" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="once" selected>單次配送</option>
                                                <option value="30d">每周一次</option>
                                                <option value="60d">雙周一次</option> 
                                            </select>
                                        </label>
                                        <p class="vg-ps">內容：${item.pinfo} ${item.c_option}</p>
                                    </div>
                                </td>
                                <td class="aa${item.pid}">
                                    <input type="checkbox" value="家有兒童" id="kids${item.pid}" onclick="addtocnote(this)">
                                    <label for="kids${item.pid}">家有兒童</label><br />
                                    <input type="checkbox" value="辛香料" id="spice${item.pid}" onclick="addtocnote(this)">
                                    <label for="spice${item.pid}">辛香料</label><br />
                                    <button class="btn btn-vg-xs m-2 shadow-sm w-75 towishbtn" onClick="towishbtn(this)">下次再買</button>
                                </td>
                             </tr>         
                            `;
                                $("#cartitems").append(trHtml);
                            } else if (item.size == 'l' && item.freq == 'once') {
                                var trHtml = `
                            <tr class="aa${item.pid}">
                                <td class="aa${item.pid}">${item.pname}</td>
                                <td class="text-start">
                                    <div>
                                        <label for="quantity">份量
                                            <select name="size" id="quantity" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="s">1-2</option>
                                                <option value="l" selected>3-4</option>
                                            </select>
                                        </label>
                                        <label for="delivery">配送
                                            <select name="freq" id="delivery" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="once" selected>單次配送</option>
                                                <option value="30d">每周一次</option>
                                                <option value="60d">雙周一次</option> 
                                            </select>
                                        </label>
                                        <p class="vg-ps">內容：${item.pinfo}  ${item.c_option}</p>
                                    </div>
                                </td>
                                <td class="aa${item.pid}">
                                    <input type="checkbox" value="家有兒童" id="kids${item.pid}" onclick="addtocnote(this)">
                                    <label for="kids${item.pid}">家有兒童</label><br />
                                    <input type="checkbox" value="辛香料" id="spice${item.pid}" onclick="addtocnote(this)">
                                    <label for="spice${item.pid}">辛香料</label><br />
                                    <button class="btn btn-vg-xs m-2 shadow-sm w-75 towishbtn" onClick="towishbtn(this)">下次再買</button>
                                </td>
                             </tr>         
                            `;
                                $("#cartitems").append(trHtml);
                            } else if (item.size == 's' && item.freq == '30d') {
                                var trHtml = `
                            <tr class="aa${item.pid}">
                                <td class="aa${item.pid}">${item.pname}</td>
                                <td class="text-start">
                                    <div>
                                        <label for="quantity">份量
                                            <select name="size" id="quantity" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="s" selected>1-2</option>
                                                <option value="l">3-4</option>
                                            </select>
                                        </label>
                                        <label for="delivery">配送
                                            <select name="freq" id="delivery" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="once">單次配送</option>
                                                <option value="30d" selected>每周一次</option>
                                                <option value="60d">雙周一次</option> 
                                            </select>
                                        </label>
                                        <p class="vg-ps">內容：${item.pinfo}  ${item.c_option}</p>
                                    </div>
                                </td>
                                <td class="aa${item.pid}">
                                    <input type="checkbox" value="家有兒童" id="kids${item.pid}" onclick="addtocnote(this)">
                                    <label for="kids${item.pid}">家有兒童</label><br />
                                    <input type="checkbox" value="辛香料" id="spice${item.pid}" onclick="addtocnote(this)">
                                    <label for="spice${item.pid}">辛香料</label><br />
                                    <button class="btn btn-vg-xs m-2 shadow-sm w-75 towishbtn" onClick="towishbtn(this)">下次再買</button>
                                </td>
                             </tr>         
                            `;
                                $("#cartitems").append(trHtml);
                            } else if (item.size == 'l' && item.freq == '30d') {
                                var trHtml = `
                            <tr class="aa${item.pid}">
                                <td class="aa${item.pid}">${item.pname}</td>
                                <td class="text-start">
                                    <div>
                                        <label for="quantity">份量
                                            <select name="size" id="quantity" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="s">1-2</option>
                                                <option value="l" selected>3-4</option>
                                            </select>
                                        </label>
                                        <label for="delivery">配送
                                            <select name="freq" id="delivery" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="once">單次配送</option>
                                                <option value="30d" selected>每周一次</option>
                                                <option value="60d">雙周一次</option> 
                                            </select>
                                        </label>
                                        <p class="vg-ps">內容：${item.pinfo} ${item.c_option} </p>
                                    </div>
                                </td>
                                <td class="aa${item.pid}">
                                    <input type="checkbox" value="家有兒童" id="kids${item.pid}" onclick="addtocnote(this)">
                                    <label for="kids${item.pid}">家有兒童</label><br />
                                    <input type="checkbox" value="辛香料" id="spice${item.pid}" onclick="addtocnote(this)">
                                    <label for="spice${item.pid}">辛香料</label><br />
                                    <button class="btn btn-vg-xs m-2 shadow-sm w-75 towishbtn" onClick="towishbtn(this)">下次再買</button>
                                </td>
                             </tr>         
                            `;
                                $("#cartitems").append(trHtml);
                            } else if (item.size == 's' && item.freq == '60d') {
                                var trHtml = `
                            <tr class="aa${item.pid}">
                                <td class="aa${item.pid}">${item.pname}</td>
                                <td class="text-start">
                                    <div>
                                        <label for="quantity">份量
                                            <select name="size" id="quantity" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="s" selected>1-2</option>
                                                <option value="l">3-4</option>
                                            </select>
                                        </label>
                                        <label for="delivery">配送
                                            <select name="freq" id="delivery" class="form-select-sm aa${item.pid}" onChange="handleitem(this)">
                                                <option value="once">單次配送</option>
                                                <option value="30d">每周一次</option>
                                                <option value="60d" selected>雙周一次</option> 
                                            </select>
                                        </label>
                                        <p class="vg-ps">內容：${item.pinfo}  ${item.c_option}</p>
                                    </div>
                                </td>
                                <td class="aa${item.pid}">
                                    <input type="checkbox" value="家有兒童" id="kids${item.pid}" onclick="addtocnote(this)">
                                    <label for="kids${item.pid}">家有兒童</label><br />
                                    <input type="checkbox" value="辛香料" id="spice${item.pid}" onclick="addtocnote(this)">
                                    <label for="spice${item.pid}">辛香料</label><br />
                                    <button class="btn btn-vg-xs m-2 shadow-sm w-75 towishbtn" onClick="towishbtn(this)">下次再買</button>
                                </td>
                             </tr>         
                            `;
                                $("#cartitems").append(trHtml);
                            } else {
                                var trHtml = `
                            <tr class="aa${item.pid}">
                                <td class="aa${item.pid}">${item.pname}</td>
                                <td class="text-start">
                                    <div>
                                        <label for="quantity">份量
                                            <select name="size" id="quantity" class="form-select-sm aa${item.pid}"  onChange="handleitem(this)">
                                                <option value="s">1-2</option>
                                                <option value="l" selected>3-4</option>
                                            </select>
                                        </label>
                                        <label for="delivery">配送
                                            <select name="freq" id="delivery" class="form-select-sm aa${item.pid}"  onChange="handleitem(this)">
                                                <option value="once">單次配送</option>
                                                <option value="30d">每周一次</option>
                                                <option value="60d" selected>雙周一次</option> 
                                            </select>
                                        </label>
                                        <p class="vg-ps">內容：${item.pinfo}  ${item.c_option}</p>
                                    </div>
                                </td>
                                <td class="aa${item.pid}">
                                    <input type="checkbox" value="家有兒童" id="kids${item.pid}" onclick="addtocnote(this)">
                                    <label for="kids${item.pid}">家有兒童</label><br />
                                    <input type="checkbox" value="辛香料" id="spice${item.pid}" onclick="addtocnote(this)">
                                    <label for="spice${item.pid}">辛香料</label><br />
                                    <button class="btn btn-vg-xs m-2 shadow-sm w-75 towishbtn" onClick="towishbtn(this)">下次再買</button>
                                </td>
                             </tr>         
                            `;
                                $("#cartitems").append(trHtml);
                            }
                        })
                        // console.log(items)
                        countTotal(items)
                    })

                    function countTotal(items) {
                        // 金額試算表格
                        var total = 0;
                        var shippingfee = 0;
                        items.map((item) => {
                            console.log(item)
                            // 購買品項
                            item.size == 's' ? fee = 160 : fee = 290; // 運費 (S-160 L-290)
                            item.size == 's' ? item.size = '雙人箱(1~2人)' : item.size = '家庭箱(3~4人)';
                            if (item.freq == 'once') {
                                item.freq = '單次購買'
                            } else if (item.freq == '30d') {
                                item.freq = '每周一次'
                            } else {
                                item.freq = '雙周一次'
                            }
                            item.c_note == null ? item.c_note = '無備註' : item.c_note;
                            if (item.size == '雙人箱(1~2人)' && item.freq == '單次購買') {
                                item.price = parseInt(item.price) * item.quantity
                            } else if (item.size == '家庭箱(3~4人)' && item.freq == '單次購買') {
                                item.price = (parseInt(item.price) + 200) * item.quantity
                            } else if (item.size == '雙人箱(1~2人)' && item.freq == '每周一次') {
                                item.price = (parseInt(item.price) * 4) * item.quantity
                            } else if (item.size == '家庭箱(3~4人)' && item.freq == '每周一次') {
                                item.price = ((parseInt(item.price) + 200) * 4) * item.quantity
                            } else if (item.size == '雙人箱(1~2人)' && item.freq == '雙周一次') {
                                item.price = (parseInt(item.price) * 4) * item.quantity
                            } else {
                                item.price = ((parseInt(item.price) + 200) * 4) * item.quantity
                            }

                            var divHtml = `
                            <tr>
                                <td>
                                    <p class="vg-p">${item.pname}</p>
                                    <p class="vg-ps">${item.size} ${item.freq} <span class="aa${item.pid}">${item.c_note}</span></p>
                                    
                                </td>
                                <td>${item.quantity}</td>
                                <td>${item.price}</td>
                            </tr>
                            `;
                            $('#summary_items').append(divHtml)
                            shippingfee += fee;
                            total += item.price;
                        })
                        // 運費計算
                        var tdHtml = `    
                        <td>${shippingfee}</td>
                        `;
                        $('#shippingfee').after(tdHtml)
                        // 總金額計算 (未含折扣碼與購物金)
                        $('#total').text(shippingfee + total)
                    }

                    // 讀取購物金
                    var bonus = 0; // 不動
                    var usemyBonus = 0;
                    $.get(`/user/bonus/${uid}`, function (e) {
                        // console.log(e[0].bonus)
                        bonus = e[0].bonus ? e[0].bonus : 0;
                        $('#userBonus').text(bonus)
                    }).then(function () {
                        // 使用購物金
                        // console.log(parseInt(userBonus.innerText))
                        bonusval = (e) => {
                            // console.log(e.value)
                            // 小於使用者擁有購物金，依照使用者輸入的值進行使用
                            if (e.value <= parseInt(userBonus.innerText)) {
                                usemyBonus = e.value;
                            } else {
                                // 若超過使用者擁有購物金，跳出提醒並以擁有購物金為最高值
                                Swal.fire({
                                    title: '超過折抵上限',
                                    icon: 'warning',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                // 欲折抵的購物金input欄位值 = 購物金餘額
                                myuseBonus.value = parseInt(userBonus.innerText);
                                //使用購物金
                                usemyBonus = parseInt(userBonus.innerText);
                            }
                            // console.log(usemyBonus)
                        }

                        useBonus = () => {
                            // 如果 已套用購物金 小於使用者擁有購物金
                            if (parseInt(bonusdiscount.innerText) > -bonus) {
                                Swal.fire({
                                    title: '成功使用購物金',
                                    icon: 'success',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                //  金額試算更新使用購物金
                                //  購物金 => 目前數值 - usemyBonus => 掛負數
                                $('#bonusdiscount').text(parseInt(bonusdiscount.innerText) - usemyBonus);
                                // console.log( parseInt($('#total').text()) + usemyBonus )
                                var newTotal = parseInt($('#total').text()) - usemyBonus
                                $('#total').text(newTotal);
                                $('#userBonus').text(parseInt(userBonus.innerText) - usemyBonus)
                                $('#myuseBonus').val('')
                            } else {
                                Swal.fire({
                                    title: '購物金折抵已達上限',
                                    icon: 'warning',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            }
                        }
                    })

                    // 使用折扣碼
                    var usemycoupon; // coupon ID
                    var useDiscount = 0; // coupon Discount
                    couponval = (e) => {
                        // console.log(e.value)
                        usemycoupon = e.value;
                    }

                    useCoupon = () => {
                        $.get(`/getcoupon/${usemycoupon}`, function (e) {
                            // console.log(e)
                            if (e == '') {
                                Swal.fire({
                                    title: '折扣碼錯誤',
                                    icon: 'error',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            } else if (e != '' && usecouponid.innerText == '') {
                                // console.log(e[0].discount)
                                Swal.fire({
                                    title: '成功使用折扣碼',
                                    icon: 'success',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                useDiscount = e[0].discount
                                usecouponid.innerText = usemycoupon;
                                coupondiscount.innerText = useDiscount;
                                newTotal = parseInt($('#total').text()) + parseInt(useDiscount)
                                $('#total').text(newTotal);
                            } else {
                                Swal.fire({
                                    title: '本訂單已使用折扣碼',
                                    icon: 'error',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            }
                        })
                    }

                    $(function () {
                        // 讀取願望清單物件
                        $.get(`/cart/wishlist/${uid}`, function (e) {
                            if (typeof (e) == 'string') {
                                items = JSON.parse(e);
                            } else if (e == '' && $('tr[class*="aa"]').length == 0) {
                                // 購物車與願望清單為空，跳轉回產品頁面
                                Swal.fire({
                                    title: '購物車是空的，請先進行選購',
                                    icon: 'warning',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                setTimeout(() => { document.location.href = "/product"; }, 1500)
                            } else {
                                items = e;
                            }
                            // $("#wishlistitems").empty();
                            $.each(items, function (index, item) {
                                var divHtml = `
                            <div class="myItem d-flex position-relative">
                                <img src="/img/fruitbox.png" alt="">
                                <div class="align-self-center text-center px-2" id="aa${item.pid}">
                                    <button class="btn btn-outline-dark btn-sm close-btn" onClick="deleteFromWishlist(this)">x</button>
                                    <p class="vg-p m-0 p-0 ">${item.product}</p>
                                    <p class="vg-ps m-0 p-0">${item.price}</p>
                                    <button class="btn btn-vg-xs m-2 shadow-sm" onClick="buynow(this)">立刻買</button>
                                </div>
                            </div>         
                            `;
                                $("#wishlistitems").append(divHtml);
                            })
                        }).then(function () {
                            // GSAP套件 - 水平平移
                            const wrapper = document.querySelector("#wishlistitems");
                            const boxes = gsap.utils.toArray(".myItem");
                            let activeElement;
                            const loop = horizontalLoop(boxes, {
                                paused: true,
                                draggable: true, // make it draggable
                                center: true, // active element is the one in the center of the container rather than th left edge
                                onChange: (element, index) => { // when the active element changes, this function gets called.
                                    // activeElement && activeElement.classList.remove("active");
                                    // element.classList.add("active");
                                    // activeElement = element;
                                    if (activeElement) {
                                        activeElement.classList.remove("active");
                                    }
                                    if (element) {
                                        element.classList.add("active");
                                    }
                                    activeElement = element;
                                }
                            });
                            // boxes.forEach((box, i) => box.addEventListener("click", () => loop.toIndex(i, { duration: 0.8, ease: "power1.inOut" })));
                            boxes.forEach((box, i) => {
                                box.addEventListener("click", () => {
                                    if (loop) {
                                        loop.toIndex(i, { duration: 0.8, ease: "power1.inOut" });
                                    }
                                });
                            });
                            function horizontalLoop(items, config) {
                                items = gsap.utils.toArray(items);
                                config = config || {};
                                let onChange = config.onChange,
                                    lastIndex = 0,
                                    tl = gsap.timeline({
                                        repeat: config.repeat, onUpdate: onChange && function () {
                                            let i = tl.closestIndex();
                                            if (lastIndex !== i) {
                                                lastIndex = i;
                                                onChange(items[i], i);
                                            }
                                        }, paused: config.paused, defaults: { ease: "none" }, onReverseComplete: () => tl.totalTime(tl.rawTime() + tl.duration() * 100)
                                    }),
                                    length = items.length,
                                    startX = items[0].offsetLeft,
                                    times = [],
                                    widths = [],
                                    spaceBefore = [],
                                    xPercents = [],
                                    curIndex = 0,
                                    indexIsDirty = false,
                                    center = config.center,
                                    pixelsPerSecond = (config.speed || 1) * 100,
                                    snap = config.snap === false ? v => v : gsap.utils.snap(config.snap || 1),
                                    timeOffset = 0,
                                    container = center === true ? items[0].parentNode : gsap.utils.toArray(center)[0] || items[0].parentNode,
                                    totalWidth,
                                    getTotalWidth = () => items[length - 1].offsetLeft + xPercents[length - 1] / 100 * widths[length - 1] - startX + spaceBefore[0] + items[length - 1].offsetWidth * gsap.getProperty(items[length - 1], "scaleX") + (parseFloat(config.paddingRight) || 0),
                                    populateWidths = () => {
                                        let b1 = container.getBoundingClientRect(), b2;
                                        items.forEach((el, i) => {
                                            widths[i] = parseFloat(gsap.getProperty(el, "width", "px"));
                                            xPercents[i] = snap(parseFloat(gsap.getProperty(el, "x", "px")) / widths[i] * 100 + gsap.getProperty(el, "xPercent"));
                                            b2 = el.getBoundingClientRect();
                                            spaceBefore[i] = b2.left - (i ? b1.right : b1.left);
                                            b1 = b2;
                                        });
                                        gsap.set(items, {
                                            xPercent: i => xPercents[i]
                                        });
                                        totalWidth = getTotalWidth();
                                    },
                                    timeWrap,
                                    populateOffsets = () => {
                                        timeOffset = center ? tl.duration() * (container.offsetWidth / 2) / totalWidth : 0;
                                        center && times.forEach((t, i) => {
                                            times[i] = timeWrap(tl.labels["label" + i] + tl.duration() * widths[i] / 2 / totalWidth - timeOffset);
                                        });
                                    },
                                    getClosest = (values, value, wrap) => {
                                        let i = values.length,
                                            closest = 1e10,
                                            index = 0, d;
                                        while (i--) {
                                            d = Math.abs(values[i] - value);
                                            if (d > wrap / 2) {
                                                d = wrap - d;
                                            }
                                            if (d < closest) {
                                                closest = d;
                                                index = i;
                                            }
                                        }
                                        return index;
                                    },
                                    populateTimeline = () => {
                                        let i, item, curX, distanceToStart, distanceToLoop;
                                        tl.clear();
                                        for (i = 0; i < length; i++) {
                                            item = items[i];
                                            curX = xPercents[i] / 100 * widths[i];
                                            distanceToStart = item.offsetLeft + curX - startX + spaceBefore[0];
                                            distanceToLoop = distanceToStart + widths[i] * gsap.getProperty(item, "scaleX");
                                            tl.to(item, { xPercent: snap((curX - distanceToLoop) / widths[i] * 100), duration: distanceToLoop / pixelsPerSecond }, 0)
                                                .fromTo(item, { xPercent: snap((curX - distanceToLoop + totalWidth) / widths[i] * 100) }, { xPercent: xPercents[i], duration: (curX - distanceToLoop + totalWidth - curX) / pixelsPerSecond, immediateRender: false }, distanceToLoop / pixelsPerSecond)
                                                .add("label" + i, distanceToStart / pixelsPerSecond);
                                            times[i] = distanceToStart / pixelsPerSecond;
                                        }
                                        timeWrap = gsap.utils.wrap(0, tl.duration());
                                    },
                                    refresh = (deep) => {
                                        let progress = tl.progress();
                                        tl.progress(0, true);
                                        populateWidths();
                                        deep && populateTimeline();
                                        populateOffsets();
                                        deep && tl.draggable ? tl.time(times[curIndex], true) : tl.progress(progress, true);
                                    },
                                    proxy;
                                gsap.set(items, { x: 0 });
                                populateWidths();
                                populateTimeline();
                                populateOffsets();
                                window.addEventListener("resize", () => refresh(true));
                                function toIndex(index, vars) {
                                    vars = vars || {};
                                    (Math.abs(index - curIndex) > length / 2) && (index += index > curIndex ? -length : length); // always go in the shortest direction
                                    let newIndex = gsap.utils.wrap(0, length, index),
                                        time = times[newIndex];
                                    if (time > tl.time() !== index > curIndex && index !== curIndex) { // if we're wrapping the timeline's playhead, make the proper adjustments
                                        time += tl.duration() * (index > curIndex ? 1 : -1);
                                    }
                                    if (time < 0 || time > tl.duration()) {
                                        vars.modifiers = { time: timeWrap };
                                    }
                                    curIndex = newIndex;
                                    vars.overwrite = true;
                                    gsap.killTweensOf(proxy);
                                    return vars.duration === 0 ? tl.time(timeWrap(time)) : tl.tweenTo(time, vars);
                                }
                                tl.toIndex = (index, vars) => toIndex(index, vars);
                                tl.closestIndex = setCurrent => {
                                    let index = getClosest(times, tl.time(), tl.duration());
                                    if (setCurrent) {
                                        curIndex = index;
                                        indexIsDirty = false;
                                    }
                                    return index;
                                };
                                tl.current = () => indexIsDirty ? tl.closestIndex(true) : curIndex;
                                tl.next = vars => toIndex(tl.current() + 1, vars);
                                tl.previous = vars => toIndex(tl.current() - 1, vars);
                                tl.times = times;
                                tl.progress(1, true).progress(0, true); // pre-render for performance
                                if (config.reversed) {
                                    tl.vars.onReverseComplete();
                                    tl.reverse();
                                }
                                if (config.draggable && typeof (Draggable) === "function") {
                                    proxy = document.createElement("div")
                                    let wrap = gsap.utils.wrap(0, 1),
                                        ratio, startProgress, draggable, dragSnap, lastSnap, initChangeX,
                                        align = () => tl.progress(wrap(startProgress + (draggable.startX - draggable.x) * ratio)),
                                        syncIndex = () => tl.closestIndex(true);
                                    typeof (InertiaPlugin) === "undefined" && console.warn("InertiaPlugin required for momentum-based scrolling and snapping. https://greensock.com/club");
                                    draggable = Draggable.create(proxy, {
                                        trigger: items[0].parentNode,
                                        type: "x",
                                        onPressInit() {
                                            let x = this.x;
                                            gsap.killTweensOf(tl);
                                            startProgress = tl.progress();
                                            refresh();
                                            ratio = 1 / totalWidth;
                                            initChangeX = (startProgress / -ratio) - x;
                                            gsap.set(proxy, { x: startProgress / -ratio });
                                        },
                                        onDrag: align,
                                        onThrowUpdate: align,
                                        overshootTolerance: 0,
                                        inertia: true,
                                        snap(value) {
                                            if (Math.abs(startProgress / -ratio - this.x) < 10) {
                                                return lastSnap + initChangeX
                                            }
                                            let time = -(value * ratio) * tl.duration(),
                                                wrappedTime = timeWrap(time),
                                                snapTime = times[getClosest(times, wrappedTime, tl.duration())],
                                                dif = snapTime - wrappedTime;
                                            Math.abs(dif) > tl.duration() / 2 && (dif += dif < 0 ? tl.duration() : -tl.duration());
                                            lastSnap = (time + dif) / tl.duration() / -ratio;
                                            return lastSnap;
                                        },
                                        onRelease() {
                                            syncIndex();
                                            draggable.isThrowing && (indexIsDirty = true);
                                        },
                                        onThrowComplete: syncIndex
                                    })[0];
                                    tl.draggable = draggable;
                                }
                                tl.closestIndex(true);
                                lastIndex = curIndex;
                                onChange && onChange(items[curIndex], curIndex);
                                return tl;
                            }
                        })
                    })

                    // 選擇份量和頻率 更新購物車 cart 資料表
                    handleitem = (e) => {
                        var parent = e.closest('tr[class*="aa"]')
                        // console.log($(parent).find('td')[0].innerText)
                        var product = $(parent).find('td')[0].innerText;
                        var originalPid = parent.className.substr(2);
                        // console.log(originalPid)
                        var quantity = $(parent).find('select[name="size"]').val();
                        // console.log(quantity)
                        var delivery = $(parent).find('select[name="freq"]').val();
                        // console.log(delivery)
                        fetch('/cart/handleitem/', {
                            method: 'POST',
                            headers: {
                                "Content-Type": "application/json ; charset=UTF-8"
                            },
                            body: JSON.stringify({
                                product: product,
                                freq: delivery,
                                size: quantity,
                                uid: uid,
                                o_pid: originalPid
                            })
                        }).then(
                            location.reload()
                        )
                    }
                    // 將 c_note 推進 cart 資料表
                    var c_note = [];
                    addtocnote = (e) => {
                        // console.log(e.closest('td').className);
                        var pid = e.closest('td').className;
                        // console.log(pid)
                        if (e.checked) {
                            if (!c_note[pid]) {
                                c_note[pid] = [];
                            }
                            c_note[pid].push(e.value);
                        } else {
                            if (c_note[pid]) {
                                const index = c_note[pid].indexOf(e.value);
                                if (index !== -1) {
                                    c_note[pid].splice(index, 1);
                                    if (c_note[pid].length === 0) {
                                        // delete c_note[pid];
                                        c_note[pid].push('');
                                    }
                                }
                            }
                        }
                        // console.log(c_note);
                        Object.keys(c_note).map((pid) => {
                            var cnotestr = c_note[pid].join(' ');
                            // console.log(cnotestr);
                            fetch('/editcart/c_note/', {
                                method: 'PATCH',
                                headers: {
                                    "Content-Type": "application/json ; charset=UTF-8"
                                },
                                body: JSON.stringify({
                                    c_note: cnotestr,
                                    pid: pid.substr(2),
                                    uid: uid
                                })
                            }).then(function () {
                                // 若取消勾選所有備註項目，金額試算處同步調整內容
                                if (cnotestr != '') {
                                    document.querySelector(`span[class="${pid}"]`).innerText = cnotestr
                                } else {
                                    document.querySelector(`span[class="${pid}"]`).innerText = '無備註'
                                }
                            })
                        });
                    }



                    // 點選下次再買按鈕 => 更新至wishlist資料表 => 刪除cart資料表中該項產品
                    towishbtn = (e) => {
                        // console.log(e.closest('tr[class*="aa"]').className)
                        var pid = e.closest('tr[class*="aa"]').className;
                        fetch('/addtowishlist/', {
                            method: 'post',
                            headers: {
                                "Content-Type": "application/json ; charset=UTF-8"
                            },
                            body: JSON.stringify({
                                uid: uid,
                                pid: pid.substr(2)
                            })
                        }).then(
                            fetch('/cart/deleteitem/', {
                                method: 'DELETE',
                                headers: {
                                    "Content-Type": "application/json ; charset=UTF-8"
                                },
                                body: JSON.stringify({
                                    uid: uid,
                                    pid: pid.substr(2)
                                })
                            })
                        ).then(
                            location.reload()
                        )
                    }

                    // 點選 立即買按鈕 => 更新至 cart 資料表 => 刪除wishlist資料表中該項產品
                    buynow = (e) => {
                        // console.log(e.closest('div[id^=aa]').id)
                        var pid = e.closest('div[id^=aa]').id;
                        fetch('/cart/additem/', {
                            method: 'post',
                            headers: {
                                "Content-Type": "application/json ; charset=UTF-8"
                            },
                            body: JSON.stringify({
                                uid: uid,
                                pid: pid.substr(2)
                            })
                        }).then(
                            fetch('/delwishlist/', {
                                method: 'DELETE',
                                headers: {
                                    "Content-Type": "application/json ; charset=UTF-8"
                                },
                                body: JSON.stringify({
                                    uid: uid,
                                    pid: pid.substr(2)
                                })
                            })
                        ).then(
                            location.reload()
                        )
                    }

                    // 從願望清單刪除
                    deleteFromWishlist = (e) => {
                        var pid = e.closest('div[id^=aa]').id;
                        Swal.fire({
                            title: '確定要移除本產品?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: '確定',
                            cancelButtonText: '取消'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                fetch('/delwishlist/', {
                                    method: 'DELETE',
                                    headers: {
                                        "Content-Type": "application/json ; charset=UTF-8"
                                    },
                                    body: JSON.stringify({
                                        uid: uid,
                                        pid: pid.substr(2)
                                    })
                                }).then(
                                    function (response) {
                                        if (response.status === 200) {
                                            e.closest('.myItem').remove();
                                            // location.reload()
                                        }
                                    });
                            }
                        })
                    }

                    backtoProduct = () => {
                        localStorage.removeItem('optionPrice')
                    }

                    // 按下結帳去的動作
                    placeOrder = () => {
                        // 亂數產生一個 oid 並推進 cart 資料表 ( c_status = active的項目 )
                        // console.log( $('#total').text() )
                        if ($('#total').text() <= 0) {
                            Swal.fire({
                                title: '您還沒有進行購物，請先到產品區逛逛喔！',
                                icon: 'warning',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(
                                setTimeout(() => {
                                    document.location.href = "/"
                                }, 2000)
                            )
                        } else {
                            var oid = parseInt((Math.random()) * 10000000)
                            // 亂數產生的oid
                            // console.log(oid)
                            // 每個item 的 c_status 由 active 轉為 inactive
                            fetch('/editcart/status/', {
                                method: 'PATCH',
                                headers: {
                                    "Content-Type": "application/json ; charset=UTF-8"
                                },
                                body: JSON.stringify({
                                    oid: oid,
                                    uid: uid
                                })
                            }).then(
                                // 建立訂單 oid || uid 
                                fetch('/editcart/createorder/', {
                                    method: 'post',
                                    headers: {
                                        "Content-Type": "application/json ; charset=UTF-8"
                                    },
                                    body: JSON.stringify({
                                        oid: oid,
                                        uid: uid,
                                        useBonus: usemyBonus,
                                        useCoupon: useDiscount
                                    })
                                })
                            ).then(
                                document.location.href = "/order/"
                            )
                        }
                    }
                </script>


</body>

</html>